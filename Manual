# DA CONTINUIDADE A UM PROJETO QUE ESTAVA EM REPOSITÓRIO DO GIT

1. git config --global user.name "cleomarpro" (criando usuário do git, utiliza o mesmo do github)
2. git config --global user.email "cleomar-pro@outlook.com" (E-mail do github)
3. git config --global user.name (visualizar usuário utilizado)
4. git config --global user.email(visualizar email utilizado)
5. git clone  https://github.com/cleomarpro/gestao_varejo.git (clonando o projeto na maquina local)
6. Linux:  python3 -m  venv  nome da venv.   Windous: python -m venv myvenv (criar virtula enve na mesma pasta do projeto)
7. Linux: source NomeDaVenv/bin/activate.
    bash no windows: source NomeDaVenv/Scripts/activate,
    Windows: NomeDaVenv\Scripts\activate (ativar a venv)
8. criar o arquivo .env e colocar essa chave SECRET_KEY= HgHjUyGbFbgHJmJjHmGf (arquivo para guardadr chaves)
9. pip install -r requirements.txt (comando para instalar os  requirements.txt)
10. python manage.py migrate (fazer as migrações)
11. Criando o admin:  python manage.py createsuperuser (criar o super usuário)
12. python manage.py runserver (iniciar o servidor)

#INICIAR UM PROJETO DO ZERO

1. Criar uma pasta para o projeto
#2. Linux:  python3 -m  venv  nome da venv.   Windous: python -m venv myvenv (criar virtula enve na mesma pasta do projeto)
3. Linux=  source nome da venv/bin/activate. Windows: nome da venv\Sicrpts\activate (ativar a venv)
=======
#3. Linux: source NomeDaVenv/bin/activate.
    bash no windows: source NomeDaVenv/Scripts/activate,
    Windows: NomeDaVenv\Scripts\activate (ativar a venv)
4. pip install django (instalação do django)
5. pip Install python3.8    ( instalar a versão mais recente do python, Obs: isso se necessário mudar a versão)
6. django-admin nome do projeto (Criar uma projeto)
7. python manage.py migrate (fazer migração)
8. python manage.py createsuperuser (criar super usuario)
9. python manage.py startapp nome da app (criar uma app)
10. python manage.py runserver (iniciar o servidor)
11 deactivate (desligar o servidor)
12 pip freeze (Visualizar os requirements.txt)
23 pip freeze > requirements.txt (Criar a pastas e os requirements.txt)

# COMANDOS MAIS UTILIZADOS

1. python manage.py makemigrations ( prepara os dados para a migração )
2. python manage.py migrate ( migrar os dados)
3. python manage.py runserver (iniciar o servidor)
3. deactivate (desligar o servidor)
4. python manage.py createsuperuser (criar super usuario)
5. python manage.py startapp nome da app (criar uma app)
#6. Linux: source NomeDaVenv/bin/activate.
    Bash no windows: source NomeDaVenv/Scripts/activate,
    Windows: NomeDaVenv\Scripts\activate (ativar a venv)
# CONSULTAS NA ORM DO DJANGO


# Resovendo problemas comums

1. mudando um arquivo ou pasta de propietário ( chown -Rv NomeDoPropietário venvGestao )